package com.asoft.ytdl.ui;

import com.asoft.ytdl.YtdlApplication;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import javax.swing.text.DefaultCaret;
import javax.swing.text.html.HTMLDocument;
import javax.swing.text.html.HTMLEditorKit;
import java.awt.*;
import java.text.SimpleDateFormat;
import java.util.Date;


public class MainFrame extends JFrame {

    public JPanel mainPanel;
    private JTextPane textPaneLogs;
    private JButton buttonStartAPI;
    private JLabel labelServerStatus;
    private JLabel labelServer;
    private JPanel panelServerStatus;
    private JPanel panelStartAPI;

    //#region Init

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    public MainFrame() {
        init();
    }

    private void init() {
        // Frame
        setTitle("YTools Desktop");
        setContentPane(mainPanel);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        mainPanel.setPreferredSize(new Dimension(500, 250));
        mainPanel.setMinimumSize(new Dimension(500, 250));

        // Textarea log
        DefaultCaret caret = (DefaultCaret) textPaneLogs.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);

        // Menu
        setupMenu();

        // Buttons
        buttonStartAPI.addActionListener(e -> onAPIButtonClicked());

        pack();
        mainPanel.repaint();
    }

    // #endregion

    /**
     * Setup toolbar and menu
     */
    private void setupMenu() {
        JMenuBar mb = new JMenuBar();
        JMenu menuFile = new JMenu("Fichier");
        // JMenuItem menuTest = new JMenuItem("Test");
        JMenuItem menuClearLogs = new JMenuItem("Effacer les logs");
        JMenuItem menuSettings = new JMenuItem("Options");
        JMenuItem menuAbout = new JMenuItem("À Propos");
        JMenuItem menuExit = new JMenuItem("Quitter");

        // Test
        // menuTest.addActionListener(e -> test());
        // menuFile.add(menuTest);

        // Clear Logs
        menuClearLogs.addActionListener(e -> clearLogs());
        menuFile.add(menuClearLogs);

        // Options
        menuSettings.addActionListener(e -> onMenuSettingsClicked());
        menuFile.add(menuSettings);

        // A Propos
        menuAbout.addActionListener(e -> onMenuAboutClicked());
        menuFile.add(menuAbout);

        // Quitter
        menuExit.addActionListener(e -> onMenuExitClicked());
        menuFile.add(menuExit);

        mb.add(menuFile);
        setJMenuBar(mb);
    }
    // #endregion


    //#region MENU

    //#region Listeners
    private void onAPIButtonClicked() {
        // API déjà démarrée
        if (YtdlApplication.isStarted()) {
            new Thread(() -> {
                YtdlApplication.stopAPI();
                log("Server stopped");
                buttonStartAPI.setText("Démarrer l'API");
                labelServerStatus.setText("Hors-ligne");
                labelServerStatus.setForeground(new Color(217, 83, 79));
            }).start();
        }


        if (!YtdlApplication.isStarted()) {
            new Thread(() -> {
                log("Starting server..");
                YtdlApplication.startAPI();
                log("Server started");
                buttonStartAPI.setText("Arrêter l'API");
                labelServerStatus.setText("En ligne");
                labelServerStatus.setForeground(new Color(92, 184, 92));
            }).start();
        }
    }

    // Menu - Settings
    private void onMenuSettingsClicked() {
        SettingsDialog s = new SettingsDialog();
        s.setLocationRelativeTo(this);
        s.setVisible(true);
    }

    // Menu - About
    private void onMenuAboutClicked() {
        JOptionPane.showMessageDialog(null, "YTools v0.1.0", "À Propos", JOptionPane.INFORMATION_MESSAGE);
    }

    //#endregion


    //#region Logs

    // Menu - Exit
    private void onMenuExitClicked() {
        System.exit(0);
    }

    /**
     * Log message in textarea and console
     */
    public void log(String text) {
        log(text, false);
    }

    public void log(String text, boolean isError) {
        String date = new SimpleDateFormat("HH:mm:ss").format(new Date());

        if (isError) {
            System.err.println(date + " " + text);
            text = "<span style='color:red'>" + text + "</span>";
        } else System.out.println(date + " " + text);

        // TextPane
        HTMLDocument doc = (HTMLDocument) textPaneLogs.getStyledDocument();
        HTMLEditorKit kit = (HTMLEditorKit) textPaneLogs.getEditorKit();

        try {
            kit.insertHTML(doc, doc.getLength(), date + " " + text, 0, 0, null);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // #endregion

    public void clearLogs() {
        textPaneLogs.setText("");
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 1, 0, 1), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panelServerStatus = new JPanel();
        panelServerStatus.setLayout(new GridLayoutManager(1, 2, new Insets(5, 0, 5, 0), -1, -1));
        panel1.add(panelServerStatus, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        labelServerStatus = new JLabel();
        labelServerStatus.setForeground(new Color(-4497616));
        labelServerStatus.setText("Hors-ligne");
        panelServerStatus.add(labelServerStatus, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        labelServer = new JLabel();
        labelServer.setText("Statut du serveur :");
        panelServerStatus.add(labelServer, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        panelStartAPI = new JPanel();
        panelStartAPI.setLayout(new GridLayoutManager(1, 2, new Insets(5, 0, 5, 0), 20, -1));
        panel1.add(panelStartAPI, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        buttonStartAPI = new JButton();
        buttonStartAPI.setText("Démarrer l'API");
        panelStartAPI.add(buttonStartAPI, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        scrollPane1.setAutoscrolls(true);
        mainPanel.add(scrollPane1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, 1, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(-1, 80), null, 0, false));
        textPaneLogs = new JTextPane();
        textPaneLogs.setContentType("text/html");
        textPaneLogs.setEditable(false);
        scrollPane1.setViewportView(textPaneLogs);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() { return mainPanel; }

}
